#[cfg(test)]
pub mod isomorphism_tests {
    use crate::graph::graph::Graph;
    use crate::graph::undirected::simple_graph::graph::SimpleGraph;
    use crate::graph::vertex::Vertex;
    use crate::service::constructions::isomorphism::is_isomorphic;
    use crate::service::io::reader::Reader;
    use crate::service::io::reader_g6::G6Reader;
    use crate::tests::test_data::test_data;
    use petgraph::graph::{NodeIndex, UnGraph};
    use petgraph::stable_graph::StableGraph;
    use petgraph::Undirected;
    use std::{fs, time};

    #[test]
    fn isomorphism_test() {
        let petersen = test_data::get_petersen_graph();
        let other = test_data::get_colorable_graph_20();
        let isomorphic = is_isomorphic(&petersen, &other);
        assert_eq!(isomorphic, false);

        let first_str = "e?HI?eO?GC?A_AOCp???X???S???????C??A???O?G????????????D_???O???X???H????IH???????O@C_?G?????G?G??Q???????R?O?_????@C??_";
        let second_str = "e?HG?eO?G??A_AO?@???W??O??gg???CU??_?CO???g???FG????A????????G??????c???@g???E????@c@?????_??GA??????????FG????G?_???A_";

        let first: SimpleGraph = G6Reader::read_graph(first_str).unwrap();
        let second: SimpleGraph = G6Reader::read_graph(second_str).unwrap();
        let isomorphic = is_isomorphic(&first, &second);
        assert_eq!(isomorphic, false);
    }

    #[test]
    fn isomorphism_measurement_test() {
        // let path = "resources/measurement_samples/Generated_graphs.38.05.sn.cyc4.10K.g6";
        let path = "resources/measurement_samples/dfs-vs-sat/10K.dot_product.58.g6";
        let file_result = fs::OpenOptions::new().read(true).open(&path).unwrap();
        let mut reader = G6Reader::<SimpleGraph>::new(&file_result);
        let begin = time::Instant::now();

        // 38
        // let first_str = "e?HI?eO?GC?A_AOCp???X???S???????C??A???O?G????????????D_???O???X???H????IH???????O@C_?G?????G?G??Q???????R?O?_????@C??_";
        // 58
        let first_str = "y??G@eO?G?CB_?O?_????C?G?PI?????CC????CG??_??C@??K????H?O?@????F@??????@?G??C?O??A_??G??C?????xO?????@O??@??????O????????????C????@????????????@k?????@??????AC?????????????_OO?????@???????@??????_???????A?_??????A????????K??????A?????????_g?????C_?????????@c???????`????????@AG";
        let first: SimpleGraph = G6Reader::read_graph(first_str).unwrap();

        let mut counter = 0;
        while let Some(graph_result) = reader.next() {
            let mut graph = graph_result.unwrap();

            let isomorphic = is_isomorphic(&first, &graph);
            if isomorphic {
                counter += 1;
            }
        }
        assert_eq!(counter, 1);
        println!("elapsed: {}", begin.elapsed().as_millis());
    }
}
